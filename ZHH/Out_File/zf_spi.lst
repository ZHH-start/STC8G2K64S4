C51 COMPILER V9.60.0.0   ZF_SPI                                                            12/08/2023 20:31:21 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE ZF_SPI
OBJECT MODULE PLACED IN .\Out_File\zf_spi.obj
COMPILER INVOKED BY: C:\Keil_v5_C51\C51\BIN\C51.EXE ..\Libraries\seekfree_libraries\zf_spi.c LARGE OMF2 OPTIMIZE(8,SPEED
                    -) BROWSE INCDIR(..\Libraries\libraries;..\Libraries\seekfree_libraries;..\Libraries\seekfree_peripheral;..\USER;..\CODE)
                    - DEBUG PRINT(.\Out_File\zf_spi.lst) TABS(2) OBJECT(.\Out_File\zf_spi.obj)

line level    source

   1          /*********************************************************************************************************
             -************
   2           * COPYRIGHT NOTICE
   3           * Copyright (c) 2020,逐飞科技
   4           * All rights reserved.
   5           * 技术讨论QQ群：一群：179029047(已满)  二群：244861897(已满)  三群：824575535
   6           *
   7           * 以下所有内容版权均属逐飞科技所有，未经允许不得用于商业用途，
   8           * 欢迎各位使用并传播本程序，修改内容时必须保留逐飞科技的版权声明。
   9           *
  10           * @file          spi
  11           * @company       成都逐飞科技有限公司
  12           * @author        逐飞科技(QQ790875685)
  13           * @version       查看doc内version文件 版本说明
  14           * @Software    MDK FOR C51 V9.60
  15           * @Target core   STC8G2K64S4
  16           * @Taobao      https://seekfree.taobao.com/
  17           * @date          2020-4-14
  18           *********************************************************************************************************
             -***********/
  19          
  20          #include "zf_gpio.h"
  21          #include "zf_spi.h"
  22          
  23          //--------------------------------------------------------------------------------------------------------
             ------------
  24          //  @brief      spi初始化函数(ss引脚由软件控制)
  25          //  @param      spi_n     选择SPI模块(SPI_1-SPI_4)
  26          //  @param      sck_pin     选择SCK引脚
  27          //  @param      mosi_pin    选择MOSI引脚
  28          //  @param      miso_pin    选择MISO引脚
  29          //  @param      mstr      主从选择
  30          //  @param      mode            SPI模式 0：CPOL=0 CPHA=0    1：CPOL=0 CPHA=1   2：CPOL=1 CPHA=0   3：CPOL=
             -1 CPHA=1 //具体细节可自行百度
  31          //  @param      baud      速率选择
  32          //  @since      v1.0
  33          //  Sample usage:       spi_init(SPI_1, SPI1_SCLK_P15, SPI1_MOSI_P13, SPI1_MISO_P14, 0, MASTER, SYSclk_DIV_4)
             -;
  34          //                //初始化SPI1,主机模式,速率为系统频率/4，SCLK引脚P1.5 MOSI引脚P1.3 MISO引脚P1.4，SPI模式0
  35          //--------------------------------------------------------------------------------------------------------
             ------------
  36          void spi_init(SPIN_enum spi_n,
  37                        SPI_PIN_enum sck_pin,
  38                        SPI_PIN_enum mosi_pin,
  39                        SPI_PIN_enum miso_pin,
  40                        uint8 mode,
  41                        SPI_MSTR_enum mstr,
  42                        SPI_BAUD_enum baud)
  43          {
  44   1      
  45   1          sck_pin  = sck_pin;
  46   1          mosi_pin = mosi_pin;
  47   1          miso_pin = miso_pin;
C51 COMPILER V9.60.0.0   ZF_SPI                                                            12/08/2023 20:31:21 PAGE 2   

  48   1      
  49   1          switch (spi_n) {
  50   2              // IO口需要配置为：准双向口（传统8051端口模式，弱上拉）
  51   2              case SPI_1:
  52   2                  gpio_mode(P1_3, GPIO);
  53   2                  gpio_mode(P1_4, GPIO);
  54   2                  gpio_mode(P1_5, GPIO);
  55   2                  gpio_pull_set(P1_3, PULLUP);
  56   2                  gpio_pull_set(P1_4, NOPULL);
  57   2                  gpio_pull_set(P1_5, PULLUP);
  58   2                  break;
  59   2              case SPI_2:
  60   2                  gpio_mode(P2_3, GPIO);
  61   2                  gpio_mode(P2_4, GPIO);
  62   2                  gpio_mode(P2_5, GPIO);
  63   2                  gpio_pull_set(P2_3, PULLUP);
  64   2                  gpio_pull_set(P2_4, NOPULL);
  65   2                  gpio_pull_set(P2_5, PULLUP);
  66   2                  break;
  67   2              case SPI_3:
  68   2                  gpio_mode(P4_0, GPIO);
  69   2                  gpio_mode(P4_1, GPIO);
  70   2                  gpio_mode(P4_3, GPIO);
  71   2                  gpio_pull_set(P4_0, PULLUP);
  72   2                  gpio_pull_set(P4_1, NOPULL);
  73   2                  gpio_pull_set(P4_3, PULLUP);
  74   2                  break;
  75   2              case SPI_4:
  76   2                  gpio_mode(P3_4, GPIO);
  77   2                  gpio_mode(P3_3, GPIO);
  78   2                  gpio_mode(P3_2, GPIO);
  79   2                  gpio_pull_set(P3_4, PULLUP);
  80   2                  gpio_pull_set(P3_3, NOPULL);
  81   2                  gpio_pull_set(P3_2, PULLUP);
  82   2                  break;
  83   2          }
  84   1      
  85   1          P_SW1 &= ~(0x03 << 2); // 清除SPI功能脚选择位
  86   1          switch (spi_n) {
  87   2              case SPI_1:
  88   2                  P_SW1 |= (0x00 << 2);
  89   2                  break;
  90   2              case SPI_2:
  91   2                  P_SW1 |= (0x01 << 2);
  92   2                  break;
  93   2              case SPI_3:
  94   2                  P_SW1 |= (0x02 << 2);
  95   2                  break;
  96   2              case SPI_4:
  97   2                  P_SW1 |= (0x03 << 2);
  98   2                  break;
  99   2          }
 100   1      
 101   1          SPCTL &= 0xF3; // 清除SPI极性和相位
 102   1          switch (mode) {
 103   2              case 0:
 104   2      
 105   2                  break;
 106   2              case 1:
 107   2                  SPCTL |= 0x01 << 2;
 108   2                  break;
 109   2              case 2:
C51 COMPILER V9.60.0.0   ZF_SPI                                                            12/08/2023 20:31:21 PAGE 3   

 110   2                  SPCTL |= 0x02 << 2;
 111   2                  break;
 112   2              case 3:
 113   2                  SPCTL |= 0x03 << 2;
 114   2                  break;
 115   2          }
 116   1      
 117   1          SPCTL |= baud; // 速率设定
 118   1      
 119   1          if (mstr == MASTER) {
 120   2              SPCTL |= 1 << 7; // 忽略SS引脚功能，使用MSTR确定器件是主机还是从机
 121   2              SPCTL |= 1 << 4; // 主机模式
 122   2          } else {
 123   2              // 不做操作
 124   2          }
 125   1          SPCTL |= 1 << 6; // 使能SPI功能
 126   1      }
 127          
 128          //--------------------------------------------------------------------------------------------------------
             ------------
 129          //  @brief      SPI发送接收函数
 130          //  @param      dat           发送的数据
 131          //  @since      v1.0
 132          //  Sample usage:       buf_1 = spi_mosi(buf);    //发送buf的内容，并接收到buf_1里，长度为1字节
 133          //--------------------------------------------------------------------------------------------------------
             ------------
 134          uint8 spi_mosi(uint8 dat)
 135          {
 136   1          SPDAT = dat; // DATA寄存器赋值
 137   1          while (!(SPSTAT & 0x80))
 138   1              ;          // 查询完成标志
 139   1          SPSTAT = 0xc0; // 清中断标志
 140   1          return SPDAT;
 141   1      }
 142          
 143          //--------------------------------------------------------------------------------------------------------
             ------------
 144          //  @brief      spi引脚切换函数(ss引脚由软件控制)
 145          //  @param      spi_n     选择SPI模块(SPI_1-SPI_4)
 146          //  @param      sck_pin     选择SCK引脚
 147          //  @param      mosi_pin    选择MOSI引脚
 148          //  @param      miso_pin    选择MISO引脚
 149          //  Sample usage:       spi_change_pin(SPI_1,SPI1_SCLK_P15, SPI1_MOSI_P13,SPI1_MISO_P14);
 150          //                //切换SPI引脚
 151          //--------------------------------------------------------------------------------------------------------
             ------------
 152          void spi_change_pin(SPIN_enum spi_n, SPI_PIN_enum sck_pin, SPI_PIN_enum mosi_pin, SPI_PIN_enum miso_pin)
 153          {
 154   1          sck_pin  = sck_pin;
 155   1          mosi_pin = mosi_pin;
 156   1          miso_pin = miso_pin;
 157   1      
 158   1          P_SW1 &= ~(0x03 << 2); // 清除SPI功能脚选择位
 159   1          switch (spi_n) {
 160   2              // IO口需要配置为：准双向口（传统8051端口模式，弱上拉）
 161   2              case SPI_1:
 162   2                  gpio_mode(P1_3, GPIO);
 163   2                  gpio_mode(P1_4, GPIO);
 164   2                  gpio_mode(P1_5, GPIO);
 165   2                  gpio_pull_set(P1_3, PULLUP);
 166   2                  gpio_pull_set(P1_4, NOPULL);
 167   2                  gpio_pull_set(P1_5, PULLUP);
C51 COMPILER V9.60.0.0   ZF_SPI                                                            12/08/2023 20:31:21 PAGE 4   

 168   2                  break;
 169   2              case SPI_2:
 170   2                  gpio_mode(P2_3, GPIO);
 171   2                  gpio_mode(P2_4, GPIO);
 172   2                  gpio_mode(P2_5, GPIO);
 173   2                  gpio_pull_set(P2_3, PULLUP);
 174   2                  gpio_pull_set(P2_4, NOPULL);
 175   2                  gpio_pull_set(P2_5, PULLUP);
 176   2                  break;
 177   2              case SPI_3:
 178   2                  gpio_mode(P4_0, GPIO);
 179   2                  gpio_mode(P4_1, GPIO);
 180   2                  gpio_mode(P4_3, GPIO);
 181   2                  gpio_pull_set(P4_0, PULLUP);
 182   2                  gpio_pull_set(P4_1, NOPULL);
 183   2                  gpio_pull_set(P4_3, PULLUP);
 184   2                  break;
 185   2              case SPI_4:
 186   2                  gpio_mode(P3_4, GPIO);
 187   2                  gpio_mode(P3_3, GPIO);
 188   2                  gpio_mode(P3_2, GPIO);
 189   2                  gpio_pull_set(P3_4, PULLUP);
 190   2                  gpio_pull_set(P3_3, NOPULL);
 191   2                  gpio_pull_set(P3_2, PULLUP);
 192   2                  break;
 193   2          }
 194   1      
 195   1          switch (spi_n) {
 196   2              case SPI_1:
 197   2                  P_SW1 |= (0x00 << 2);
 198   2                  break;
 199   2              case SPI_2:
 200   2                  P_SW1 |= (0x01 << 2);
 201   2                  break;
 202   2              case SPI_3:
 203   2                  P_SW1 |= (0x02 << 2);
 204   2                  break;
 205   2              case SPI_4:
 206   2                  P_SW1 |= (0x03 << 2);
 207   2                  break;
 208   2          }
 209   1      }
 210          
 211          //--------------------------------------------------------------------------------------------------------
             ------------
 212          //  @brief      spi模式切换函数
 213          //  @param      mode            SPI模式 0：CPOL=0 CPHA=0    1：CPOL=0 CPHA=1   2：CPOL=1 CPHA=0   3：CPOL=
             -1 CPHA=1 //具体细节可自行百度
 214          //  Sample usage:
 215          //--------------------------------------------------------------------------------------------------------
             ------------
 216          void spi_change_mode(uint8 mode)
 217          {
 218   1          SPCTL &= 0xF7; // 清除SPI极性和相位
 219   1          switch (mode) {
 220   2              case 0:
 221   2      
 222   2                  break;
 223   2              case 1:
 224   2                  SPCTL |= 0x01 << 2;
 225   2                  break;
 226   2              case 2:
C51 COMPILER V9.60.0.0   ZF_SPI                                                            12/08/2023 20:31:21 PAGE 5   

 227   2                  SPCTL |= 0x02 << 2;
 228   2                  break;
 229   2              case 3:
 230   2                  SPCTL |= 0x03 << 2;
 231   2                  break;
 232   2          }
 233   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    536    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      11
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
